// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyStocks.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyStocks.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240123234519_add_Shares")]
    partial class add_Shares
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyStocks.Domain.Currencies.CurrencyTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CurrencyCode")
                        .IsUnique();

                    b.ToTable("CurrencyTypes");
                });

            modelBuilder.Entity("MyStocks.Domain.Shares.Shares", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("ShareType")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalShares")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("MyStocks.Domain.Shares.SharesDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("OperandType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ShareId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SharesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ShareId");

                    b.HasIndex("SharesId");

                    b.ToTable("SharesDetail");
                });

            modelBuilder.Entity("MyStocks.Domain.Shares.Shares", b =>
                {
                    b.OwnsOne("MyStocks.Domain.Currencies.Currency", "AveragePrice", b1 =>
                        {
                            b1.Property<Guid>("SharesId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CurrencyTypeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric");

                            b1.HasKey("SharesId");

                            b1.HasIndex("CurrencyTypeId");

                            b1.ToTable("Shares");

                            b1.HasOne("MyStocks.Domain.Currencies.CurrencyTypes", "CurrencyType")
                                .WithMany()
                                .HasForeignKey("CurrencyTypeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("SharesId");

                            b1.Navigation("CurrencyType");
                        });

                    b.OwnsOne("MyStocks.Domain.Currencies.Currency", "TotalValueInvested", b1 =>
                        {
                            b1.Property<Guid>("SharesId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CurrencyTypeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric");

                            b1.HasKey("SharesId");

                            b1.HasIndex("CurrencyTypeId");

                            b1.ToTable("Shares");

                            b1.HasOne("MyStocks.Domain.Currencies.CurrencyTypes", "CurrencyType")
                                .WithMany()
                                .HasForeignKey("CurrencyTypeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("SharesId");

                            b1.Navigation("CurrencyType");
                        });

                    b.Navigation("AveragePrice")
                        .IsRequired();

                    b.Navigation("TotalValueInvested")
                        .IsRequired();
                });

            modelBuilder.Entity("MyStocks.Domain.Shares.SharesDetail", b =>
                {
                    b.HasOne("MyStocks.Domain.Shares.Shares", "Share")
                        .WithMany()
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyStocks.Domain.Shares.Shares", null)
                        .WithMany("SharesDetails")
                        .HasForeignKey("SharesId");

                    b.OwnsOne("MyStocks.Domain.Currencies.Currency", "Price", b1 =>
                        {
                            b1.Property<Guid>("SharesDetailId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CurrencyTypeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric");

                            b1.HasKey("SharesDetailId");

                            b1.HasIndex("CurrencyTypeId");

                            b1.ToTable("SharesDetail");

                            b1.HasOne("MyStocks.Domain.Currencies.CurrencyTypes", "CurrencyType")
                                .WithMany()
                                .HasForeignKey("CurrencyTypeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("SharesDetailId");

                            b1.Navigation("CurrencyType");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Share");
                });

            modelBuilder.Entity("MyStocks.Domain.Shares.Shares", b =>
                {
                    b.Navigation("SharesDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
